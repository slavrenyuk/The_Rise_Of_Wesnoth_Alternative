
# Macros for 5 difficulty levels


#define QUANTITY5 NAME DIFFICULTY_1_VALUE DIFFICULTY_2_VALUE DIFFICULTY_3_VALUE DIFFICULTY_4_VALUE DIFFICULTY_5_VALUE
    # Macro to define a 'quantity' differently based on difficulty levels.
#ifdef DIFFICULTY_1
    {NAME}={DIFFICULTY_1_VALUE}
#endif
#ifdef DIFFICULTY_2
    {NAME}={DIFFICULTY_2_VALUE}
#endif
#ifdef DIFFICULTY_3
    {NAME}={DIFFICULTY_3_VALUE}
#endif
#ifdef DIFFICULTY_4
    {NAME}={DIFFICULTY_4_VALUE}
#endif
#ifdef DIFFICULTY_5
    {NAME}={DIFFICULTY_5_VALUE}
#endif
#enddef


#define TURNS5 DIFFICULTY_1_VALUE DIFFICULTY_2_VALUE DIFFICULTY_3_VALUE DIFFICULTY_4_VALUE DIFFICULTY_5_VALUE
    # Macro to define number of turns for different difficulty levels.
    {QUANTITY5 turns {DIFFICULTY_1_VALUE} {DIFFICULTY_2_VALUE} {DIFFICULTY_3_VALUE} {DIFFICULTY_4_VALUE} {DIFFICULTY_5_VALUE}}
#enddef


#define GOLD5 DIFFICULTY_1_VALUE DIFFICULTY_2_VALUE DIFFICULTY_3_VALUE DIFFICULTY_4_VALUE DIFFICULTY_5_VALUE
    # Macro to define starting gold for different difficulty levels.
    {QUANTITY5 gold {DIFFICULTY_1_VALUE} {DIFFICULTY_2_VALUE} {DIFFICULTY_3_VALUE} {DIFFICULTY_4_VALUE} {DIFFICULTY_5_VALUE}}
#enddef


#define INCOME5 DIFFICULTY_1_VALUE DIFFICULTY_2_VALUE DIFFICULTY_3_VALUE DIFFICULTY_4_VALUE DIFFICULTY_5_VALUE
    # Macro to define income for different difficulty levels.
    {QUANTITY5 income {DIFFICULTY_1_VALUE} {DIFFICULTY_2_VALUE} {DIFFICULTY_3_VALUE} {DIFFICULTY_4_VALUE} {DIFFICULTY_5_VALUE}}
#enddef


# No tab or space-based indentation for these macros to avoid trouble when these macros are used
# in the middle of a quoted string literal
#
# wmlindent: start ignoring
# wmlscope: start conditionals
#ifdef DIFFICULTY_1
#define ON_DIFFICULTY5 DIFFICULTY_1_VALUE DIFFICULTY_2_VALUE DIFFICULTY_3_VALUE DIFFICULTY_4_VALUE DIFFICULTY_5_VALUE
{DIFFICULTY_1_VALUE}#enddef
#endif
#ifdef DIFFICULTY_2
#define ON_DIFFICULTY5 DIFFICULTY_1_VALUE DIFFICULTY_2_VALUE DIFFICULTY_3_VALUE DIFFICULTY_4_VALUE DIFFICULTY_5_VALUE
{DIFFICULTY_2_VALUE}#enddef
#endif
#ifdef DIFFICULTY_3
#define ON_DIFFICULTY5 DIFFICULTY_1_VALUE DIFFICULTY_2_VALUE DIFFICULTY_3_VALUE DIFFICULTY_4_VALUE DIFFICULTY_5_VALUE
{DIFFICULTY_3_VALUE}#enddef
#endif
#ifdef DIFFICULTY_4
#define ON_DIFFICULTY5 DIFFICULTY_1_VALUE DIFFICULTY_2_VALUE DIFFICULTY_3_VALUE DIFFICULTY_4_VALUE DIFFICULTY_5_VALUE
{DIFFICULTY_4_VALUE}#enddef
#endif
#ifdef DIFFICULTY_5
#define ON_DIFFICULTY5 DIFFICULTY_1_VALUE DIFFICULTY_2_VALUE DIFFICULTY_3_VALUE DIFFICULTY_4_VALUE DIFFICULTY_5_VALUE
{DIFFICULTY_5_VALUE}#enddef
#endif
# wmlscope: stop conditionals
# wmlindent: stop ignoring
# wmlscope: prune ON_DIFFICULTY5


# Similar to ON_DIFFICULTY5, but can not be inlined and executes all blocks of code for current and lower levels.
# E.g. {ON_DIFFICULTY5_PROGRESSIVE (codeA) (codeB) (codeC) (codeD) (codeE)} for DIFFICULTY_3 executes codeA, codeB and codeC
#
# wmlindent: start ignoring
# wmlscope: start conditionals
#ifdef DIFFICULTY_1
    #define ON_DIFFICULTY5_PROGRESSIVE DIFFICULTY_1_WML DIFFICULTY_2_WML DIFFICULTY_3_WML DIFFICULTY_4_WML DIFFICULTY_5_WML
        {DIFFICULTY_1_WML}
    #enddef
#endif
#ifdef DIFFICULTY_2
    #define ON_DIFFICULTY5_PROGRESSIVE DIFFICULTY_1_WML DIFFICULTY_2_WML DIFFICULTY_3_WML DIFFICULTY_4_WML DIFFICULTY_5_WML
        {DIFFICULTY_1_WML}
        {DIFFICULTY_2_WML}
  #enddef
#endif
#ifdef DIFFICULTY_3
    #define ON_DIFFICULTY5_PROGRESSIVE DIFFICULTY_1_WML DIFFICULTY_2_WML DIFFICULTY_3_WML DIFFICULTY_4_WML DIFFICULTY_5_WML
        {DIFFICULTY_1_WML}
        {DIFFICULTY_2_WML}
        {DIFFICULTY_3_WML}
    #enddef
#endif
#ifdef DIFFICULTY_4
    #define ON_DIFFICULTY5_PROGRESSIVE DIFFICULTY_1_WML DIFFICULTY_2_WML DIFFICULTY_3_WML DIFFICULTY_4_WML DIFFICULTY_5_WML
        {DIFFICULTY_1_WML}
        {DIFFICULTY_2_WML}
        {DIFFICULTY_3_WML}
        {DIFFICULTY_4_WML}
    #enddef
#endif
#ifdef DIFFICULTY_5
    #define ON_DIFFICULTY5_PROGRESSIVE DIFFICULTY_1_WML DIFFICULTY_2_WML DIFFICULTY_3_WML DIFFICULTY_4_WML DIFFICULTY_5_WML
        {DIFFICULTY_1_WML}
        {DIFFICULTY_2_WML}
        {DIFFICULTY_3_WML}
        {DIFFICULTY_4_WML}
        {DIFFICULTY_5_WML}
    #enddef
#endif
# wmlscope: stop conditionals
# wmlindent: stop ignoring
# wmlscope: prune ON_DIFFICULTY5_PROGRESSIVE


# Similar to ON_DIFFICULTY5, but can not be inlined and executes all blocks of code for current and higher levels.
# E.g. {ON_DIFFICULTY5_REGRESSIVE (codeA) (codeB) (codeC) (codeD) (codeE)} for DIFFICULTY_3 executes codeC, codeD and codeE
#
# wmlindent: start ignoring
# wmlscope: start conditionals
#ifdef DIFFICULTY_1
    #define ON_DIFFICULTY5_REGRESSIVE DIFFICULTY_1_WML DIFFICULTY_2_WML DIFFICULTY_3_WML DIFFICULTY_4_WML DIFFICULTY_5_WML
        {DIFFICULTY_1_WML}
        {DIFFICULTY_2_WML}
        {DIFFICULTY_3_WML}
        {DIFFICULTY_4_WML}
        {DIFFICULTY_5_WML}
    #enddef
#endif
#ifdef DIFFICULTY_2
    #define ON_DIFFICULTY5_REGRESSIVE DIFFICULTY_1_WML DIFFICULTY_2_WML DIFFICULTY_3_WML DIFFICULTY_4_WML DIFFICULTY_5_WML
        {DIFFICULTY_2_WML}
        {DIFFICULTY_3_WML}
        {DIFFICULTY_4_WML}
        {DIFFICULTY_5_WML}
  #enddef
#endif
#ifdef DIFFICULTY_3
    #define ON_DIFFICULTY5_REGRESSIVE DIFFICULTY_1_WML DIFFICULTY_2_WML DIFFICULTY_3_WML DIFFICULTY_4_WML DIFFICULTY_5_WML
        {DIFFICULTY_3_WML}
        {DIFFICULTY_4_WML}
        {DIFFICULTY_5_WML}
    #enddef
#endif
#ifdef DIFFICULTY_4
    #define ON_DIFFICULTY5_REGRESSIVE DIFFICULTY_1_WML DIFFICULTY_2_WML DIFFICULTY_3_WML DIFFICULTY_4_WML DIFFICULTY_5_WML
        {DIFFICULTY_4_WML}
        {DIFFICULTY_5_WML}
    #enddef
#endif
#ifdef DIFFICULTY_5
    #define ON_DIFFICULTY5_REGRESSIVE DIFFICULTY_1_WML DIFFICULTY_2_WML DIFFICULTY_3_WML DIFFICULTY_4_WML DIFFICULTY_5_WML
        {DIFFICULTY_5_WML}
    #enddef
#endif
# wmlscope: stop conditionals
# wmlindent: stop ignoring
# wmlscope: prune ON_DIFFICULTY5_REGRESSIVE


# THIS IS A HACK for RISE_UP_RISE_UP macro in trow-macros.cfg file
# DO NOT use ON_DIFFICULTY macro in this project, use ON_DIFFICULTY5
#
# No tab or space-based indentation for these macros to avoid trouble when these macros are used
# in the middle of a quoted string literal
#
# wmlindent: start ignoring
# wmlscope: start conditionals
#ifdef DIFFICULTY_1
#define ON_DIFFICULTY EASY_VALUE NORMAL_VALUE HARD_VALUE
{EASY_VALUE}#enddef
#endif
#ifdef DIFFICULTY_2
#define ON_DIFFICULTY EASY_VALUE NORMAL_VALUE HARD_VALUE
{NORMAL_VALUE}#enddef
#endif
#ifdef DIFFICULTY_3
#define ON_DIFFICULTY EASY_VALUE NORMAL_VALUE HARD_VALUE
{NORMAL_VALUE}#enddef
#endif
#ifdef DIFFICULTY_4
#define ON_DIFFICULTY EASY_VALUE NORMAL_VALUE HARD_VALUE
{HARD_VALUE}#enddef
#endif
#ifdef DIFFICULTY_5
#define ON_DIFFICULTY EASY_VALUE NORMAL_VALUE HARD_VALUE
{HARD_VALUE}#enddef
#endif
# wmlscope: stop conditionals
# wmlindent: stop ignoring
# wmlscope: prune ON_DIFFICULTY
